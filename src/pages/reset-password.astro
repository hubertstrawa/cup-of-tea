---
import Layout from "../layouts/Layout.astro";

export const prerender = false;

// Pobranie parametrów URL
const url = new URL(Astro.request.url);
const accessToken = url.searchParams.get('access_token');
const refreshToken = url.searchParams.get('refresh_token');
const type = url.searchParams.get('type');

// Sprawdzenie czy to jest prawidłowy link resetowania hasła
let isValidResetLink = false;
let resetError: string | undefined;

if (type === 'recovery' && accessToken && refreshToken) {
  // TODO: Walidacja tokenów przez Supabase Auth
  // const { data, error } = await supabase.auth.setSession({
  //   access_token: accessToken,
  //   refresh_token: refreshToken
  // });
  // 
  // if (error) {
  //   resetError = 'Link resetowania hasła jest nieprawidłowy lub wygasł.';
  // } else {
  //   isValidResetLink = true;
  // }
  
  // Tymczasowe zachowanie dla demonstracji
  isValidResetLink = true;
} else {
  resetError = 'Nieprawidłowy link resetowania hasła. Sprawdź czy skopiowałeś cały link z e-maila.';
}
---

<Layout title="Resetowanie hasła - Cup of Tea">
  <main class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div class="text-center">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Cup of Tea</h1>
        <p class="text-gray-600">System zarządzania lekcjami języków obcych</p>
      </div>
      
      {isValidResetLink && (
        <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-green-800">
                Link jest prawidłowy
              </h3>
              <div class="mt-2 text-sm text-green-700">
                <p>
                  Możesz teraz ustawić nowe hasło dla swojego konta.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {resetError && (
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">
                Błąd linku resetowania
              </h3>
              <div class="mt-2 text-sm text-red-700">
                <p>{resetError}</p>
                <div class="mt-3">
                  <a href="/forgot-password" class="text-red-600 hover:text-red-800 underline">
                    Wyślij nowy link resetowania hasła
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <div id="auth-form-container">
        <!-- AuthForm będzie renderowany po stronie klienta tylko dla prawidłowych linków -->
      </div>
    </div>
  </main>
</Layout>

<script define:vars={{ isValidResetLink, accessToken, refreshToken }}>
  import { AuthForm } from "../components/AuthForm";
  import { createRoot } from "react-dom/client";
  import React from "react";

  // Funkcja obsługująca resetowanie hasła (placeholder)
  const handleResetPassword = async (data) => {
    // Reset password attempt with data
    
    // TODO: Implementacja resetowania hasła przez Supabase Auth
    // const { data: authData, error } = await supabase.auth.updateUser({
    //   password: data.password
    // });
    
    // if (error) {
    //   throw new Error(error.message);
    // }
    
    // Przekierowanie po udanym resetowaniu
    // window.location.href = '/login?message=password-updated';
    
    // Tymczasowe zachowanie dla demonstracji
    alert("Hasło zostało zmienione!\n\nFunkcjonalność zostanie w pełni zaimplementowana w następnym etapie.");
    window.location.href = "/login";
  };

  // Renderowanie komponentu React tylko dla prawidłowych linków
  const container = document.getElementById("auth-form-container");
  if (container && isValidResetLink) {
    const root = createRoot(container);
    root.render(
      React.createElement(AuthForm, {
        mode: "reset-password",
        onSubmit: handleResetPassword,
        isLoading: false
      })
    );
  }
</script>
